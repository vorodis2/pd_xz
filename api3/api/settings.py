"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os

from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from loguru import logger
from rest_framework.permissions import AllowAny

BASE_DIR = Path(__file__).resolve().parent.parent

# Путь до .env
DOTENV_PATH = BASE_DIR / '.env'

# Подгружаем .env
load_dotenv(dotenv_path=DOTENV_PATH)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY') or "SECRET"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True#bool(os.getenv('DEBUG'))

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS') or ["*"]
if type(ALLOWED_HOSTS) == str:
    ALLOWED_HOSTS = ALLOWED_HOSTS.split(",")

# Application definition

# STATICFILES_DIRS = [
#     BASE_DIR / 'static/',
# ]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Сторонние
    'rest_framework',
    'rest_framework.authtoken',
    'django_rest_passwordreset',
    'djoser',
    'corsheaders',
    'django_filters',
    'social_django',

    # Собственные
    # 'accounts.apps.AccountsConfig',
    # 'langs',
    'api',
    # 'textures',
    # 'objects3d',
    # 'materials',
    # 'scenes3d',
    'apps.group',
    # 'group1',
    # 'group2',
    # 'group3',
    # 'group4',
    # 'group5',
    # 'group6',
    # 'group7',
    # 'group8',
    # 'group9',
    # 'group10',
]

DJOSER = {
    'SERIALIZERS': {
        # "current_user": "accounts.serializers.CustomUserSerializer",
        # "user": "accounts.serializers.PublicCustomUserSerializer",
    },
    'ACTIVATION_URL': 'activator/?uid={uid}&token={token}',
    'SEND_ACTIVATION_EMAIL': False,
    'SEND_CONFIRMATION_EMAIL': True,
    'USER_CREATE_PASSWORD_RETYPE': True,
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Is needed for Daniel to implment registration.
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'social_django.middleware.SocialAuthExceptionMiddleware',  # <--
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',  # Social
                'social_django.context_processors.login_redirect',  # Social
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    # 'default': {
        # 'ENGINE': 'django.db.backends.postgresql_psycopg2',
        # 'NAME': os.getenv('DB_NAME'),
        # 'USER': os.getenv('DB_USER'),
        # 'PASSWORD': os.getenv('DB_PASSWORD'),
        # 'HOST': os.getenv('DB_HOST'),
        # 'PORT': os.getenv('DB_PORT'),
    # }
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # noqa: E501
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # noqa: E501
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # noqa: E501
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # noqa: E501
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ru-Ru'  # 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'

# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'static'),
# )
# Media files

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


WWW_URL = '/www/'
WWW_ROOT = BASE_DIR / 'front_kp/www/'

AUTHENTICATION_BACKENDS = (
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.vk.VKOAuth2',
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    # 'social_core.pipeline.social_auth.social_user',           # Instead of this   v
    'api.utils.social_user_custom',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 99999999,
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',  # noqa: E501
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
        # 'rest_framework.permissions.AllowAny',
    ],
}

# В продакшен моде включаем режим необходимой аутентификации,
# для доступа к ресурсам API
# Simple JWT

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ['JWT', ],
}

# No-sniff header
SECURE_CONTENT_TYPE_NOSNIFF = False
SECURE_BROWSER_XSS_FILTER = True

# CORS
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_ALL_ORIGINS = True

CORS_ORIGIN_WHITELIST = (
    "http://127.0.0.1",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:8001",
    "http://192.168.1.103",
    "http://192.168.1.103:3000",
    "http://192.168.1.103:8000",
    'http://localhost',
    'http://localhost:3000',
    'http://alphakp.ru',
    'https://alphakp.ru',
    'http://localhost:8080',
)

CORS_ALLOW = (
    "http://127.0.0.1",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:8001",
    "http://192.168.1.103",
    "http://192.168.1.103:3000",
    "http://192.168.1.103:8000",
    'http://localhost',
    'http://localhost:3000',
    'http://alphakp.ru',
    'https://alphakp.ru',
    'http://localhost:8080',
)

NON_AUTHENTICATED_API_ACCESS = AllowAny
# NON_AUTHENTICATED_API_ACCESS = IsAuthenticatedOrReadOnly
# NON_AUTHENTICATED_API_ACCESS = IsAuthenticated

# FILES_RESOURCE_AUTH_CLASSES = [SessionAuthentication, BasicAuthentication]
# OBJECTS_RESOURCE_AUTH_CLASSES = [SessionAuthentication, BasicAuthentication]
# SORTS_RESOURCE_AUTH_CLASSES = [SessionAuthentication, BasicAuthentication]

#AUTH_USER_MODEL = "django.contrib.auth.models.User" #"accounts.User"
HIDE_USERS = False

# SMTP Mail service with decouple
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = "smtp.gmail.com"

# FIXME: In production get these out of code to ENV
EMAIL_HOST_USER = "alphakplan@gmail.com"
EMAIL_HOST_PASSWORD = "12345&asd"
# FIXME: In production get these out of code to ENV

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '1080092043834-s23579uqjdqnsnoa5ulfb3qgohp12lfp.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'WrGtTJnHhmM8S6jAk9qhC3sQ'

# SOCIAL_AUTH_FACEBOOK_KEY = "536792590803301"
# SOCIAL_AUTH_FACEBOOK_SECRET = "c874812296c4ee09c491c1d0b4818ca1"

SOCIAL_AUTH_FACEBOOK_KEY = "405175650900267"                        # For test only
SOCIAL_AUTH_FACEBOOK_SECRET = "8431ec73719ae3d2d46da228094e3c34"    # For test only

SOCIAL_AUTH_VK_OAUTH2_KEY = '7910100'
SOCIAL_AUTH_VK_OAUTH2_SECRET = 'GskxNpuMZGNWTxlQgGVV'

# SOCIAL_AUTH_REDIRECT_IS_HTTPS = True

SOCIAL_AUTH_FACEBOOK_SCOPE = ['email', 'user_link']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'id, name, email, link '
}

SOCIAL_AUTH_VK_OAUTH2_SCOPE = ['email']
SOCIAL_AUTH_VK_EXTRA_DATA = [
    ('email', 'email'),
]

SOCIAL_AUTH_FACEBOOK_EXTRA_DATA = [
    ('name', 'name'),
    ('email', 'email'),
    ('picture', 'picture'),
    ('link', 'profile_url'),
]

# LOGIN_URL = '/'
# LOGOUT_URL = "logout"
# LOGIN_REDIRECT_URL = '/www/src/social/login/'

LOGIN_URL = '/'
LOGOUT_URL = "/"
LOGIN_REDIRECT_URL = '/'

LOGOUT_REDIRECT_URL = '/'
SOCIAL_AUTH_URL_NAMESPACE = 'social'

# EMAIL_PORT = 465
# EMAIL_USE_SSL = True

EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER

CHANGE_FILE_POSTFIX = "_last_change"
JSON_POSTFIX = ".json"
LAST_CHANGE_JSON_POSTFIX = CHANGE_FILE_POSTFIX + JSON_POSTFIX
LINUX_TMP_DIR = "/tmp"

'''
PLANS_ROOT = BASE_DIR / "constructor"
PRODUCTS_ROOT = BASE_DIR / "project"

front_plan_template_path = "front_kp/www/site/constructor/index.html"
front_products_template_path = "front_kp/www/site/project/index.html"

if os.path.exists(str(BASE_DIR / front_plan_template_path)):
    PLAN_HTML_TEMPLATE_FILE_PATH = BASE_DIR / front_plan_template_path
else:
    PLAN_HTML_TEMPLATE_FILE_PATH = BASE_DIR / ".." / front_plan_template_path

if not os.path.exists(PLAN_HTML_TEMPLATE_FILE_PATH) \
        or not os.path.isfile(PLAN_HTML_TEMPLATE_FILE_PATH):
    raise ValueError("Bad path is set to plan preview template html file", PLAN_HTML_TEMPLATE_FILE_PATH)

if os.path.exists(str(BASE_DIR / front_products_template_path)):
    PRODUCT_HTML_TEMPLATE_FILE_PATH = BASE_DIR / front_products_template_path
else:
    PRODUCT_HTML_TEMPLATE_FILE_PATH = BASE_DIR / ".." / front_products_template_path

if not os.path.exists(PRODUCT_HTML_TEMPLATE_FILE_PATH) \
        or not os.path.isfile(PRODUCT_HTML_TEMPLATE_FILE_PATH):
    raise ValueError("Bad path is set to products preview template html file", PRODUCT_HTML_TEMPLATE_FILE_PATH)


logger.add("loguru_debug.log", format="{time} {level} {message}", level="ERROR", rotation="10 MB")
'''